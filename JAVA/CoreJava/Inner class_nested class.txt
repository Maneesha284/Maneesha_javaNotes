Nested class / Inner class:-
===============================
Class inside another class.

Advantage:- Organize the data and provide security

4 types of Nested class
1.Simple nested class
2.static nested class
3.method nested class
4.anonymous nested class 

1.Simple nested class
In case of inner classes , 
*from outside class we can access only outside methods and outside variables,
*from inside class we can access inside methods and inside variables and outside methods and outside variables,

2.static nested class:
static class/member can declared inside of outer class.
class Outer {
	private static void outerMethod()
	{
		System.out.println("inside outerMethod");
	}
	static class Inner {

		public static void display()
		{
			System.out.println("inside inner class Method");
			outerMethod();
		}
	}
}
class GFG {
	public static void main(String args[])
	{
		Outer.Inner.display();
	}
}

output:
inside inner class Method
inside outerMethod


3.Method Local Inner Classes 
Inner class can be declared within a method of an outer class which we will be illustrating 
in the below example where Inner is an inner class in outerMethod().
// Java Program to Illustrate Inner class can be
// declared within a method of outer class 

// Class 1
// Outer class
class Outer {

	// Method inside outer class
	void outerMethod()
	{

		// Print statement
		System.out.println("inside outerMethod");

		// Class 2
		// Inner class
		// It is local to outerMethod()
		class Inner {

			// Method defined inside inner class
			void innerMethod()
			{

				// Print statement whenever inner class is
				// called
				System.out.println("inside innerMethod");
			}
		}

		// Creating object of inner class
		Inner y = new Inner();

		// Calling over method defined inside it
		y.innerMethod();
	}
}
class GFG {
	public static void main(String[] args)
	{
		Outer x = new Outer();
		x.outerMethod();
	}
}

output:
inside outerMethod
inside innerMethod

4.Anonymous Inner Classes :
Anonymous inner classes are declared without any name at all. They are created in two ways. 

As a subclass of the specified type
As an implementer of the specified interface