JSP:-
To develop View Component of JSP(presentation logic to display something for end user)
			JSP(Java server pages)
************************************************************************************************************************************

What are Java Server Pages?
*JSP is a tag based web technology
*tag means a instrucion to jsp container to develop web app
*Jsp tech provides specification to third party vendors to develop servers. 
*Jsp tech provides static and dynamic response to all endusers symoultaneously
*Compare to servlet, jsp tech to develop app with in less time.

printing msg in servlet:-
creating our own package
import interfaces and classes
creating class and impl servlet or extends GS HS
override service/doGet/doPost methods by giving appropriate exception
creating PrintWriter object and writing logic to msg on browser

printing msg in JSP:-
<%= "hello" %>
Jsp is alternative way to developing web app
Jsp file it becomes again Servlet Instead of writing code by us.

Servlet(java code, html tags)
JSP(java code(processing request) , html tags(presentation), jsp tags(processing request))

*java code to wite out side of jsp tags, java code treated as html code(printing).
<% java code %>		//Scripting tag

HTML Comments:-<!--   -->
JSP coments <%--   --%>
Advantages:-
fast development
Automatic complie
Automatic reload
No need of project structure
No need of web.xml file
good presentation logic
************************************************************************************************************************************

Life cycle methods of JSP:-
===================
	  JSP Container
test.jsp  -->Verification phase
test_jsp.java  --->Transalation phase(PageImplementationClass)
test_jsp.class  -->Compilation phase

        	Configaration phase	
	
	Servlet Conatiner
SV, SM, SB --->Loading phase
NSV, NSB, NSM, Con  --->Instantiation phase
jspInit()  --->Initailization phase
_jspService() ---->Translation phase
jspDestroy()  --->Destroy phase

Every Jsp is one servlet, That means after compilation of translation phase jsp becomes servlet.
The class(test_jsp.class) which is created by container respective of given jsp, That class we are calling page implementation class.

jspInit()  -->Initailization phase
_jspService()  -->servicing phase
jspDestroy()   -->destroy phase
************************************************************************************************************************************

HttpJspBase.....implements.......>HttpJspPage(_jspService(-,-))___extends__>jspPage(jspInit(), jspDestroy())
Tomcat follow rules of servlet and jsp whcih are given by JEE.
Tomcat server provides one class
i.e; HttpJspBase
            |
           \/
inti(){} --->jspInit(){}
service(){} --->_jspService(){}
destroy(){} --->jspDestroy(){}
************************************************************************************************************************************

There are 5 types of tags in jsp
=====================
1.Scripting tag:-
============
Scripting tag (java code):-
The tags which are useful for writing java code in .jsp file for processing request 
Three scripting tags
a)Declaration tag:-   <%! %>
Declaration tag support the logic which is suitable to write class level(V,M,B,Con) outSide of _jspService(-,-)
So it is doesn't get memory at each request
*whatever programming elements(V,M,B,Con) can we able to write within class level in declaration tag.
publi final class test_jsp extends HttpJspBase {
//writing java code outside of _jspService() means within class level we have one tag i.e; Declaration tag
	public void _jspService(-,-) {
	}
}
To wite java code with in _jspService()

b)scriptlet tag:-   <% %>
*whatever programming elements and logic we can able to write with in _jspService() method

c)expression tag:-  <%= %>
printin information on browser
************************************************************************************************************************************

2.Directive tag:-
===========
Directive tag:-
test.jsp------jspcontainer------->test_jsp.java(PIC)(Translation phase)
mean while of translation phase jsp container takes some steps to create PIC
1)import only servlet and jsp relats packages
2)By default session object is active mode
HttpSession session=pageContext.getSession();
3)we are unabel to work "exception" implicit object direclty.
4)PIC always subclass of HsttpJspBase
5)By default PIC is not thread safe
6)Response[MIME] type always "text/html".
Three types directive tags   [<%@   %>]
1)page :- import classes and interfacse, work with exception , disable session, thread safe, 
change repose type <%@ page attribute=values %>
<%@ page import="java.util.ArrayLis,----"   %>
2)taglib :- It is a directive tag which talks about tag prefix and location of tag.
<%@ taglib prefix="nit" uri="customtags">
3)include :-one jsp file includes another .jsp/.html/.text file
<%@  include file="one.jsp" %>
<%@  include file="one.html" %>
<%@  include file="one.txt" %>
************************************************************************************************************************************

3.Action tag:-
================
Explain JSP Action Tags?
This tag giving instruction to container to perform some operations. this tag main intension is "avoiding java code" from .jsp file.
writing jsp tags foreground
executing java code background
Two types of tags Action tag
a)Standad Action tag:-
-------------------------
This tags are given by jsp technology to perform some operations.This tag is "avoiding java code" from .jsp file.
These tags are start with prefix jsp:
like method calling stmt for giving
method calling stmt for reading
<jsp:include>[Standad Action tag]
<jsp:forward>
<jsp:param>
<jsp:getProperty>
<jsp:setProperty>
<jsp:userBean>
************************************************************************************************************************************

4.Custom/Userdefine tag:-
===================
b)custom/userdefine Action tag
This tag is instruction to container to perfrom some operations at run time(servicing phase according to our requirment)
These tags are start with prefix ourown:
<nit:date> [custom Action tag]

What are the JSP custom tag components?
Atrributes in custom tag:-
web.xml
ourtaglib.tld
GreetingHandler.java
************************************************************************************************************************************

5.JSTL tag:-
=========
JSTL tags:-(jstl.jar file required)
Fast development
Avoiding scripting tags
Code reusability
a)core tags:-working variables
b)formation tags:-print date info in different format.
c)functinal tags:-working string
d)sql tags:-working tags
e)xml tags:-working xml
************************************************************************************************************************************

What is JSP Expression Language?
JSP EL is makes it possible to easily access application to store data in javabeans component
JSP EL allows to create expressions both airthmetic and logical you can use integer, float, string boolean and number
<jsp:setProperty name = "box" property = "perimeter" value = "100"/>

************************************************************************************************************************************

JSP implicit Objects and their types:-
==========================
The objects which rae created and managed by both jsp and servlet container are called Implicit object
request ------->  ServlsetRequest
response ------->  ServletResponse
config  ------->  SetvletConfig
application  ------->  ServletContext
session ------->  HttpSettion
page ------->  java.lang.Object
out ------->  JspWriter
exception ------->  java.lang.Throwable
pageContext ------->  pageContext
These objects are we have to write only in  _jspService(-,-) but not jspInit() and jspDestroy()
That means we can write scriplet tag<%  %> and expression tag<%= %> but not declaration tag<%!  %>

*we have to write application and config objects  in jspInit() and jspDestroy() but not directly, by using factory methods like
ServletConfig scg=getServletConfig();
ServletContext sct=getServletContext();

*We have to create userdefined variables names as implicit object name in jspInit() and jspDestroy() but not in _jspService(-,-) 

<body bgcolor="cyan">
<%@ page isErrorPage="true" %>
	<h2>
		Request: <%= request.hashCode() %> <br>
		Response: <%= response.hashCode() %> <br>
		session: <%= session.hashCode() %> <br>
		config: <%= config.hashCode() %> <br>
		application: <%= application.hashCode() %> <br>
		out: <%= out.hashCode() %> <br>
		page: <%= page.hashCode() %> <br>
		pageContext: <%= pageContext.hashCode() %> <br>
		<%-- <exception: <% exception %> --%>
	</h2>
</body>
<!-- Request: 1707059093
Response: 1266992418
session: 890576289
config: 1010435363
application: 606182974
out: 1239540301
page: 1409550021
pageContext: 947585659 -->

************************************************************************************************************************************
pageContext:-
==========
*pageContext object is an implicit object, which is useful to hold all other implicit objects.
*It is useful to storing, deleting and retriving data from scope objects.
*It is useful for making communication between .jsp to another .jsp or .java or .html or .text files.
pageContext.include("/one.html");
pageContext.forward("./as");

------------------------------------------
|Request: 1707059093		|
|Response: 1266992418	|
|session: 890576289		|
|config: 1010435363		|
|application: 606182974	|
|out: 1239540301		|
|page: 1409550021		|
------------------------------------------
          pageContext: 947585659
************************************************************************************************************************************
Scope object in JSP:-
===============
The object is useful storing data as well as sharing data.
These implicit objects are created and maintained by container.
4 scope objects:-
1.page:-page scope object data can sharable only with in same .jsp file but not another .jsp file. Every .jsp fi;e have their own page scope object.

2.request:-request scope object data can sharable with multiple .jsp files before response commited to browser.
	 request scope object have more accessbilties compare page scope object.

3.session:-session scope object inforamtion are always sharable b/w multiple request with in same browser multiple windows.
	each and every browser having their own session scope object. One browser session context doesn't share another browser.

4.application:-application scope object information sharable with multiple pages.
Some information is needed by multiple pages independent of who the current user is. JSP supports access to this type of shared information through the
application scope.Information saved in the application scope by one page can later be accessed by another page, even if the two pages were requested by 
different users.

with the help of pageContext object we can store/read/remove from above scope objects.

setAttribute(-,-) :-It is always stores data in page scope object.

setAttribute(-,-,-) :-It is stores data in specific scope object

getAttribute(-) :-It is read data from page scope object

getAttribute(-,-) :-It is read data from specific scope object.

findAttribue(-) :-It is read data first page object if not available request object if not available session object if not avaliable application object. 

removeAttribute(-) :-It is delete data from all scope objects

removeAttribute(-,-) :-It is delete data from specific scope object.
************************************************************************************************************************************
Java Bean:-
=========
follows rules
1.class should be public
2.class should be implements java.io.Serializable or java.io.Externizable
3.class should be contains public zero/default constructor.
4.class properties/state/variables should private.
5.class methods should be public
************************************************************************************************************************************