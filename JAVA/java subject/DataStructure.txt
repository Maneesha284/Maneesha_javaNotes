Linear search:-
Linear search is a searching technique It is sequntial processing approach,
search an element squential process of an array.
import java.util.*;
class Lsearch {
	public static void main(String args[]) {
		Scanner sr=new Scanner(System.in);
		System.out.println("Enter size of an array");
		int size=sr.nextInt();
		System.out.println("Enter an array ele");
		int a[]=new int[size];
		for(int i=0;i<size;i++) {
			a[i]=sr.nextInt();
		}
		System.out.println("Enter search ele");
		int se=sr.nextInt();
		for(int i=0;i<size;i++) {
			if(a[i]==se) {
				System.out.println(a[i]+" ele is located at "+i);
			}
		}
	}
}

Binary Search:-
Binary search is the searching technique which works efficiency on sorted list.
Binary search follows divide and conquer approach

import java.util.*;
class Bsearch {
	public static void main(String args[]) {
		Scanner sr=new Scanner(System.in);
		System.out.println("Enter size of an array");
		int size=sr.nextInt();
		System.out.println("Enter an array ele");
		int a[]=new int[size];
		for(int i=0;i<size;i++) {
			a[i]=sr.nextInt();
		}
		System.out.println("Enter searching ele");
		int se=sr.nextInt();
		int temp=0;
		for(int i=0;i<size;i++) {
			for(int j=i+1;j<size;j++) {
				if(a[i]>a[j]) {
					temp=a[i];
					a[i]=a[j];
					a[j]=temp;
				}
			}	
		}
		System.out.println("sorting");
		for(int i=0;i<size;i++) {
			System.out.println(a[i]);
		}
		int flag=0,mid=0;
		for(int i=0;i<size;i++) {
		int low=0,high=size-1;
			while (low<=high)	{
			mid=(low+high)/2;
			if(se==a[mid]) {
				//System.out.println(se+" ele is found loc at "+mid);
				flag=1;
				break;
			}
			else if(se<a[mid]) {
				high=mid-1;	
			}
			else if(se>a[mid]) {
				low=mid+1;
			}
			}			
		}
		if(flag==1)	{
			System.out.println(se+"  ele found loc at "+mid);
		}
		else {
			System.out.println("ele not found");
		}
	}
}

Sorting:-
======
1.Bubble sort
2.Selection sort
3.Insertion sort
4.Merge sort
5.Quick sort


1.Bubble Sort
==========	
Bubble sort works by swapping adjacent elements if they're not in the desired order. This process repeats from the beginning of the array until all elements 
are in order.
2.Heap Sort	
========
In the heap sort, Min heap or max heap is maintained from the array elements deending upon the choice and the elements are sorted by deleting the root element 
of the heap.
3.Insertion Sort	
===========
As the name suggests, insertion sort inserts each element of the array to its proper place. It is a very simple sort method which is used to arrange 
the deck of cards while playing bridge.
4.Merge Sort	
=========
Merge sort follows divide and conquer approach in which, the list is first divided into the sets of equal elements and then each half of the list is sorted 
by using merge sort. The sorted list is combined again to form an elementary sorted array.
5.Quick Sort	
==========
Quick sort is the most optimized sort algorithms which performs sorting in O(n log n) comparisons. Like Merge sort, quick sort also work by using 
divide and conquer approach.
6.Radix Sort	
=========
In Radix sort, the sorting is done as we do sort the names according to their alphabetical order. It is the lenear sorting algorithm used for Inegers.
7.Selection Sort	
============
Selection sort finds the smallest element in the array and place it on the first place on the list, then it finds the second smallest element in the array and place it on
the second place. This process continues until all the elements are moved to their correct ordering. It carries running time which is worst than insertion sort.
